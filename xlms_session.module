<?php

/**
  * Initialize a session. Accepts a request_id from {quiz_node_results} table,
  * creates a record, and makes a connection to the Chrome app.
  *
  * @param int $result_id
  * @return object
  */
function xlms_session_initialize($result_id) {
  $xlms_session = New stdClass();
  $xlms_session->result_id = (int) $result_id;

  if ($url = variable_get('xlms_session_chrome_url', '')) {
    $xlms_session->url = $url;
  }

  xlms_session_write($xlms_session);

  return $xlms_session;
}

/**
  * Gets an XLMS session object by id.
  *
  * @param int $id
  * @return object
  */
function xlms_session_load($id) {
  $result = db_query("SELECT * FROM {xlms_session} WHERE id=:id", array(':id' => $id));
  $xlms_session = $result->fetchObject();

  if (isset($xlms_session->result_id)) {
    $result = db_query("SELECT * FROM {quiz_node_results} WHERE result_id=:id", array(':id' => $xlms_session->result_id));
    $xlms_session->result = $result->fetchObject();
  }

  drupal_alter('xlms_session_load', $xlms_session);

  return $xlms_session;
}

/**
 * Writes an XLMS session to the database.
 *
 * @param object $xlms_session
 * @return void
 */
function xlms_session_write(&$xlms_session) {
  $primary_key = !empty($xlms_session->id) ? array('id') : NULL;

  drupal_write_record('xlms_session', $xlms_session, $primary_key);
}

/**
  * Deletes an XLMS session from the database.
  *
  * @param int $id
  * @return void
  */
function xlms_session_delete($id) {
  db_delete('xlms_session')
    ->condition('id', $id)
    ->execute();
}

/**
  * Access callback for sessions.
  *
  * @param string $op
  *  The operation that's going to be performed.
  * @param array $args
  *  The arguments that will be passed to the callback.
  * @return bool
  *  Whether access is given or not.
  */
function xlms_session_access($op, $args) {

  $access = FALSE;

  // TODO: not sure how we're implementing authentication; MUST CHANGE
  switch ($op) {
    case 'retrieve':
      $access = TRUE;

    case 'update':
      $access = TRUE;

    case 'delete':
      $access = TRUE;
  }

  return $access;
}

/**
 * Implements hook_menu().
 */
function xlms_session_menu() {
  $items = array();

  $items['admin/config/xlms'] = array(
    'title' => 'XLMS',
    'description' => 'XLMS settings',
    'page callback' => 'system_admin_menu_block_page',
    'weight' => -30,
    'position' => 'right',
    'access arguments' => array('access administration pages'),
  );

  $items['admin/config/xlms/xlms_session'] = array(
    'title' => 'XLMS Session settings',
    'description' => 'Chrome app settings and other configuration details to manage XLMS sessions.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xlms_session_settings'),
    'file' => 'includes/xlms_session.settings.inc',
    'access arguments' => array('administer xlms_session settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_services_resources().
 */
function xlms_session_services_resources() {
  return array(
    'xlms_session' => array(
      'operations' => array(
        'retrieve' => array(
          'help' => 'Retrieves a session',
          'callback' => '_xlms_session_services_retrieve',
          'file' => array('type' => 'inc', 'module' => 'xlms_session', 'name' => 'includes/xlms_session.services'),
          'access callback' => 'xlms_session_access',
          'access arguments' => array('retrieve'),
          'access arguments append' => TRUE,
        'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'The id of the session to get',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
        'update' => array(
          'help' => 'Updates a session with simulator data',
          'callback' => '_xlms_session_services_update',
          'file' => array('type' => 'inc', 'module' => 'xlms_session', 'name' => 'includes/xlms_session.services'),
          'access callback' => 'xlms_session_access',
          'access arguments' => array('update'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'The id of the session to update',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'data',
              'type' => 'struct',
              'description' => 'The session data object',
              'source' => 'data',
              'optional' => FALSE,
            ),
          ),
        ),
        'delete' => array(
          'help' => 'Deletes simulator data from a session' ,
          'callback' => '_xlms_session_services_delete',
          'file' => array('type' => 'inc', 'module' => 'xlms_session', 'name' => 'includes/xlms_session.services'),
          'access callback' => 'xlms_session_access',
          'access arguments' => array('delete'),
          'access arguments append' => TRUE,
          'args' => array(
            array(
              'name' => 'id',
              'type' => 'int',
              'description' => 'The id of the session to delete',
              'source' => array('path' => '0'),
              'optional' => FALSE,
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_api().
 */
function xlms_session_ctools_plugin_api($owner, $api) {
  if ($owner == 'services' && $api == 'services') {
    return array(
      'version' => 3,
      'file' => 'xlms_session.services.inc', // Optional parameter to indicate the file name to load.
      'path' => drupal_get_path('module', 'xlms_session') . '/includes', // If specifying the file key, path is required.
    );
  }
}
